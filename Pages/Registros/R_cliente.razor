@page "/r_cliente"
@page "/r_cliente/{ClienteId:int}"
@inject ClienteBLL ClienteBLL
@inject NotificationService notify
@inject NavigationManager NavigationManager
@attribute [Authorize]


<EditForm Model="cliente" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card col-lg-7 mx-auto">
        <div class="shadow">
            <div class="card-header">
                <h1 class="text-center"><strong>Registro de Cliente</strong></h1>
            </div>
            <br>
            <br>
            <div class="card-body">
                <div class="row">
                    <div class="col-sm-2 col-md-4 mb-2 mx-auto">
                        <div class="group">
                            <InputText required="" @bind-Value="cliente.Nombre" class="input"/>
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label>Nombre</label>
                            <ValidationMessage For="@(() => cliente.Nombre)" />
                        </div>
                    </div>
                    <br>
                    <br>
                    <br>
                    <div class="col-sm-2 col-md-4 mb-2 mx-auto">
                        <div class="group">
                            <InputDate required="" @bind-Value="cliente.Fecha" class="input" id="fecha" />
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label>Fecha</label>
                            <ValidationMessage For="@(() => cliente.Fecha)" />
                        </div>
                    </div>
                </div>
                <br>
                <div class="row">
                    <div class="col-sm-2 col-md-4 mb-2 mx-auto">
                        <div class="group">
                            <InputText required="" @bind-Value="cliente.Cedula" class="input" />
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label>Cédula</label>
                            <ValidationMessage For="@(() => cliente.Cedula)" />
                        </div>
                    </div>
                    <br>
                    <br>
                    <div class="col-sm-2 col-md-4 mb-2 mx-auto">
                        <div class="group">
                            <InputText required="" @bind-Value="cliente.Direccion" class="input" />
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label>Dirección</label>
                            <ValidationMessage For="@(() => cliente.Direccion)" />
                        </div>
                    </div>
                </div>
                <br>
                <div class="row">
                    <div class="col-sm-2 col-md-4 mb-2 mx-auto">
                        <div class="group">
                            <InputText required="" @bind-Value="cliente.Telefono" class="input" />
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label>Teléfono</label>
                            <ValidationMessage For="@(() => cliente.Telefono)" />
                        </div>
                    </div>
                    <div class="col-sm-2 col-md-4 mb-2 mx-auto">
                        <div class="group">
                            <InputText required="" @bind-Value="cliente.Email" class="input" />
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label>Email</label>
                            <ValidationMessage For="@(() => cliente.Email)" />
                        </div>
                    </div>
                </div>
            </div>

            @*Botones*@
            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo"><span
                            class="oi oi-file"></span>
                        Nuevo</button>
                    <button type="submit" class="btn btn-outline-success"><span class="oi oi-document"></span>
                        Guardar</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><span
                            class="oi oi-delete"></span>
                        Eliminar</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code
{
    [Parameter]
    public int clienteId { get; set; }
    public Clientes cliente { get; set; } = new Clientes();

   protected override void OnInitialized()
    {
        if (clienteId > 0)
        {
            this.cliente.ClienteId = clienteId;
            this.Buscar();
        }
    }

    public void Nuevo()
    {
        cliente = new Clientes();
        NavigationManager.NavigateTo($"/r_cliente");
        notify.ShowNotification("Nueva plantilla creada correctamente.", NotificationSeverity.Success);
    }

    bool Validar()
    {
        bool validar = true;

        if (ClienteBLL.ExisteEmail(cliente) == false) 
        {
            notify.ShowNotification("Ya está registrado ese email, intente de nuevo.", NotificationSeverity.Warning);
            validar = false;
        }
        if (ClienteBLL.ExisteTelefono(cliente) == false) 
        {
            notify.ShowNotification("Ya está registrado ese número de teléfono, intente de nuevo.", NotificationSeverity.Warning);
            validar = false;
        }
        if (ClienteBLL.ExisteCedula(cliente) == false)
        {
            notify.ShowNotification("Ya está registrado esa cédula, intente de nuevo.", NotificationSeverity.Warning);
            validar = false;
        }

        return validar;
    }

    void Guardar()
    {

        if (!Validar()) { return; }

        if (ClienteBLL.Guardar(cliente))
        {
            notify.ShowNotification("Fue guardado correctamente.");
            cliente = new Clientes();
            NavigationManager.NavigateTo($"/r_cliente");
        }
        else
        {
            notify.ShowNotification("No fue guardado, intentar nuevamente.", NotificationSeverity.Error);
        }
             
    }

    private void Buscar()
    {
        if (cliente!.ClienteId > 0)
        {
            var encontrado = ClienteBLL.Buscar(cliente.ClienteId);
            
            if (encontrado != null)
            {
                notify.ShowNotification("Se ha encontrado con éxito", NotificationSeverity.Info);
                this.cliente = encontrado;
            }
            else
            {
                notify.ShowNotification("El ID ingresado no ha sido encontrado.", NotificationSeverity.Error);
            }
        }
    }

    public void Eliminar()
    {
        if (ClienteBLL.Eliminar(cliente.ClienteId))
        {
            notify.ShowNotification("Se ha eliminado con éxito.", NotificationSeverity.Success);
            cliente = new Clientes();
        }
        else
        {
            notify.ShowNotification("No hay elementos para borrar.", NotificationSeverity.Warning);
            return;
        }
    }
}