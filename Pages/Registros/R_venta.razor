@page "/r_venta"
@page "/r_venta/{ventaId:int}"
@inject NotificationService notify
@inject VentasBLL VentasBLL
@inject ProductoBLL ProductoBLL
@inject ClienteBLL ClienteBLL
@inject IJSRuntime jsRunTime
@*@attribute [Authorize]*@


<EditForm Model="venta" OnInvalidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card col-lg-8 mx-auto">
        <div class="shadow">
            <div class="card-header">
                <h1 class="text-center"><strong>Registro de Venta</strong></h1>
            </div>
            <br>
            <br>
            <div class="card-body">
                <div class="row">
                    <div class="col-sm-2 col-md-4 mb-2 mx-auto">
                        <div class="group">
                            <InputDate required="" @bind-Value="venta.Fecha" class="input" id="fecha" />
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label>Fecha</label>
                        </div>
                    </div>
                    <div class="col-sm- col-md-4 mb-2 mx-auto">
                        <div class="custom-group">
                            <RadzenDropDown class="custom-dropdown" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            Data=@ClienteList TextProperty="Nombre" Name="Producto" ValueProperty="ClienteId"
                            AllowClear="true" @bind-Value=@venta.ClienteId Placeholder="Cliente" />
                            <span class="custom-bar"></span>
                        </div>
                    </div>
                </div>
                <br>
                <br>
                <br>
                <br>
                <div class="row hideWhenPrint">
                    <div class="col-sm-2 col-md-3 mb-2 mx-auto">
                        <div class="custom-group">
                            <RadzenDropDown class="custom-dropdown" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            Data=@ProductoList TextProperty="Nombre" Name="Producto" ValueProperty="ProductoId"
                            AllowClear="true" @bind-Value=@detalle.ProductoId Placeholder="Producto" />
                            <span class="custom-bar"></span>
                        </div>
                    </div>
                    <br>
                    <br>
                    <div class="col-sm-2 col-md-2 mb-2 mx-auto">
                        <div class="group">
                            <InputNumber required="" @bind-Value="detalle.Cantidad" class="input" />
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label>Cantidad</label>
                        </div>
                    </div>

                    @*...................... Boton Add ......................*@

                    <div class="col-sm-2 col-md-4 mb-2 mx-auto">
                        <button type="button" class="btn btn-primary" title="AÃ±adir detalle de venta" @onclick="AgregarDetalle">
                            <span class="oi oi-plus"> Agregar</span>
                        </button>
                    </div>
                </div>

                <br>
                <br>
                <br>

                <table class="table table-light table-striped">
                    <thead class="thead">
                        <tr class="table text-center bg-inventariocolor">
                            <th class="border border-3">Producto</th>
                            <th class="border border-3">Cantidad</th>
                            <th class="border border-3">Precio</th>
                            <th class="border border-3">ITBIS</th>
                            <th class="border border-3">Importe</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (venta.ventasDetalle is not null)
                        {
                            @foreach (var item in venta.ventasDetalle)
                            {
                                <tr class="text-center">
                                    <td>@ProductoBLL.Buscar(item.ProductoId)?.Nombre</td>
                                    <td>@item.Cantidad</td>
                                    <td>RD$ @ProductoBLL.Buscar(item.ProductoId)?.Precio</td>
                                    <td>@ProductoBLL.Buscar(item.ProductoId)?.ITBIS %</td>
                                    <td>RD$ @item.Importe</td>
                                    <td class="hideWhenPrint">
                                        <button class="btn btn-danger mr-2" onclick="@(() => EliminarDetalle(item))">
                                            <i class="oi oi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                <hr>
            </div>

           <div class="custom-card-body">
                <div class="custom-row">
                    <div class="custom-col">
                        <div class="custom-form-group">
                            <div class="custom-input-group">
                                <div class="custom-input-group-prepend">
                                    <span class="custom-input-group-text">SubTotal</span>
                                </div>
                                <input type="number" class="custom-input" value="@detalle.SubTotal" readonly>
                            </div>
                        </div>
                    </div>

                    <div class="custom-col">
                        <div class="custom-form-group">
                            <div class="custom-input-group">
                                <div class="custom-input-group-prepend">
                                    <span class="custom-input-group-text">Total</span>
                                </div>
                                <input type="number" class="custom-input" value="@venta.Total" readonly>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <br>
            <br>

            @*Botones*@
            <div class="card-footer hideWhenPrint">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo"><span
                            class="oi oi-file"></span>
                        Nuevo</button>
                    <button type="submit" class="btn btn-outline-success" @onclick="Guardar"><span class="oi oi-document"></span>
                        Guardar</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><span
                            class="oi oi-delete"></span>
                        Eliminar</button>
                </div>
            </div>

            @* <div class="col-md-8">
                <div class="row">
                    <div class="col-md-12" style="text-align: center;">
                        <h1>Factura de venta</h1>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-2" style="text-align: right;">
                        <label>Nombre del cliente: @ClienteBLL.Buscar(venta.ClienteId)?.Nombre</label>
                    </div>
                    <div class="col-md-10" style="text-align: right;">
                        <label>Fecha: @venta.Fecha</label>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-12" style="text-align: right;">
                        <h1>Productos comprados</h1>
                    </div>
                </div>
                <table class="table table-light table-striped">
                    <thead class="thead">
                        <tr class="table text-center bg-inventariocolor">
                            <th class="border border-3">Producto</th>
                            <th class="border border-3">Cantidad</th>
                            <th class="border border-3">Precio</th>
                            <th class="border border-3">ITBIS</th>
                            <th class="border border-3">Importe</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (venta.ventasDetalle is not null)
                        {
                            @foreach (var item in venta.ventasDetalle)
                            {
                                <tr class="text-center">
                                    <td>@ProductoBLL.Buscar(item.ProductoId)?.Nombre</td>
                                    <td>@item.Cantidad</td>
                                    <td>RD$ @ProductoBLL.Buscar(item.ProductoId)?.Precio</td>
                                    <td>@ProductoBLL.Buscar(item.ProductoId)?.ITBIS %</td>
                                    <td>RD$ @item.Importe</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div> *@
        </div>
    </div>
</EditForm>

@code
{
    [Parameter]
    public int ventaId { get; set; }
    public Ventas venta { get; set; } = new Ventas();
    public List<Productos> ProductoList = new List<Productos>();
    public List<Clientes> ClienteList = new List<Clientes>();
    public VentasDetalle detalle = new VentasDetalle();

    protected override void OnInitialized()
    {
        if (ventaId > 0)
        {
            this.venta.VentaId = ventaId;
            this.Buscar();
        }
        ProductoList = ProductoBLL.GetList(p => true && p.Status == true);
        ClienteList = ClienteBLL.GetList(p => true && p.Status == true);
    }

    public void Nuevo()
    {
        venta = new Ventas();
        notify.ShowNotification("Nueva plantilla creada correctamente.", NotificationSeverity.Success);
    }

    bool Validar()
    {
        bool validar = true;

        if (venta!.VentaId < 0)
        {
            notify.ShowNotification("El ID debe ser mayor que 0.", NotificationSeverity.Error);
            validar = false;
        }
        if (venta.ventasDetalle.Count < 1)
        {
            notify.ShowNotification("Debe agregar al menos un detalle", NotificationSeverity.Error);
            validar = false;
        }
        if(venta.ClienteId <= 0)
        {
            notify.ShowNotification("Debe seleccionar un cliente", NotificationSeverity.Error);
            validar = false;
        }

        return validar;
    }


    void Guardar()
    {

        if (!Validar()) { return; }

        if (VentasBLL.Guardar(venta))
        {
            notify.ShowNotification("Fue guardado correctamente.");
            //Generar factura en PDF
            jsRunTime.InvokeVoidAsync("Facturar");
            venta = new Ventas();
        }
        else
        {
            notify.ShowNotification("No fue guardado, intentar nuevamente.", NotificationSeverity.Error);
        }
             
    }
    private void Buscar()
    {
        if (venta!.VentaId > 0)
        {
            var encontrado = VentasBLL.Buscar(venta.VentaId);
            
            if (encontrado != null)
            {
                notify.ShowNotification("Se ha encontrado con Ã©xito", NotificationSeverity.Success);
                this.venta = encontrado;
            }
            else
            {
                notify.ShowNotification("El ID ingresado no ha sido encontrado.", NotificationSeverity.Error);
            }
        }
    }

    public void Eliminar()
    {
        if (VentasBLL.Eliminar(venta.VentaId))
        {
            notify.ShowNotification("Se ha eliminado con Ã©xito.", NotificationSeverity.Info);
            venta = new Ventas();
        }
        else
        {
            notify.ShowNotification("No hay elementos para borrar.", NotificationSeverity.Warning);
            return;
        }
    }

    void AgregarDetalle()
    {
        var producto = ProductoBLL.Buscar(detalle.ProductoId);
        if (producto != null)
        {
            if (detalle.Cantidad > 0)
            {
                if (detalle.Cantidad <= producto.Existencia)
                {
                    // Verificar si el producto ya existe en la lista
                    var productoExistente = venta.ventasDetalle.FirstOrDefault(d => d.ProductoId == detalle.ProductoId);

                    if (productoExistente != null)
                    {
                        var cantidadDisponible = producto.Existencia - productoExistente.Cantidad;
                        if (detalle.Cantidad <= cantidadDisponible)
                        {
                            productoExistente.Cantidad += detalle.Cantidad;
                            productoExistente.Importe = productoExistente.Cantidad * producto.Precio;
                            productoExistente.ITBIS = productoExistente.Importe * (producto.ITBIS / 100);
                            productoExistente.Importe += productoExistente.ITBIS;

                            detalle = new VentasDetalle();
                        }
                        else
                        {
                            notify.ShowNotification("No se puede agregar mÃ¡s cantidad, se alcanzÃ³ la cantidad mÃ¡xima disponible del producto.", NotificationSeverity.Warning);
                        }
                    }
                    else
                    {
                        if (detalle.Cantidad <= producto.Existencia)
                        {
                            detalle.PrecioProducto = producto.Precio;
                            detalle.ITBIS = producto.ITBIS / 100;
                            detalle.SubTotal += detalle.PrecioProducto;

                            detalle.Importe = detalle.Cantidad * producto.Precio;
                            detalle.ITBIS = detalle.Importe * detalle.ITBIS;
                            detalle.Importe += detalle.ITBIS;

                            venta.ventasDetalle.Add(detalle);
                            detalle = new VentasDetalle();
                        }
                        else
                        {
                            notify.ShowNotification("No se puede agregar mÃ¡s cantidad, se alcanzÃ³ la cantidad mÃ¡xima disponible del producto.", NotificationSeverity.Warning);
                        }
                    }

                    detalle.SubTotal = venta.ventasDetalle.Sum(p => p.PrecioProducto * p.Cantidad);
                    venta.Total = venta.ventasDetalle.Sum(p => p.Importe);
                }
                else
                {
                    notify.ShowNotification("La cantidad asignada es mayor a la existencia", NotificationSeverity.Warning);
                }
            }
            else
            {
                notify.ShowNotification("La cantidad debe ser mayor que 0.", NotificationSeverity.Warning);
            }
        }
        else
        {
            notify.ShowNotification("El producto no existe.", NotificationSeverity.Warning);
        }
    }

    void EliminarDetalle(VentasDetalle detalleBorrado)
    {
        venta.ventasDetalle.Remove(detalleBorrado);
        venta.Total = venta.ventasDetalle.Sum(p => p.Importe);
    }
}
