@page "/r_facturacion"
@page "/r_facturacion/{facturaId:int}"
@inject NotificationService notify
@inject FacturacionBLL FacturacionBLL
@inject ClienteBLL ClienteBLL
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRunTime
@attribute [Authorize]


<EditForm Model="facturacion">
    <DataAnnotationsValidator />
    <div class="card col-lg-8 mx-auto">
        <div class="shadow">
            <div class="card-header">
                <h1 class="text-center"><strong>Registro de Facturación</strong></h1>
            </div>
            <br>
            <br>
            <div class="card-body">
                <div class="row">
                    <div class="col-sm-2 col-md-4 mb-2 mx-auto">
                        <div class="group">
                            <InputDate required="" @bind-Value="facturacion.Fecha" class="input" id="fecha" />
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label>Fecha</label>
                        </div>
                    </div>
                    <div class="col-sm- col-md-4 mb-2 mx-auto">
                        <div class="custom-group">
                            <RadzenDropDown class="custom-dropdown" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                            Data=@ClienteList TextProperty="Nombre" Name="Producto" ValueProperty="ClienteId"
                            AllowClear="true" @bind-Value=@facturacion.ClienteId Placeholder="Cliente" />
                            <span class="custom-bar"></span>
                        </div>
                    </div>
                </div>
                <br>
                <br>
                <br>
                <br>
                <div class="row hideWhenPrint">
                    <div class="col-sm-3 col-md-3 mb-3 mx-auto">
                        <div class="group">
                            <InputText @bind-Value="detalle.Concepto" class="input" />
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label>Concepto</label>
                        </div>
                    </div>
                    <br>
                    <br>
                    <div class="col-sm-2 col-md-2 mb-2 mx-auto">
                        <div class="group">
                            <InputNumber @bind-Value="detalle.Cantidad" class="input" />
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label>Cantidad</label>
                        </div>
                    </div>
                    <div class="col-sm-2 col-md-2 mb-2 mx-auto">
                        <div class="group">
                            <InputNumber @bind-Value="detalle.Precio" class="input" />
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label>Precio</label>
                        </div>
                    </div>

                    @*...................... Boton Add ......................*@

                    <div class="col-sm-2 col-md-4 mb-2 mx-auto">
                        <button type="button" class="btn btn-primary" title="Añadir detalle de venta" @onclick="AgregarDetalle">
                            <span class="oi oi-plus"> Agregar</span>
                        </button>
                    </div>
                </div>

                <br>
                <br>
                <br>

                <table class="table table-light table-striped">
                    <thead class="thead">
                        <tr class="table text-center bg-inventariocolor">
                            <th class="border border-3">Concepto</th>
                            <th class="border border-3">Cantidad</th>
                            <th class="border border-3">Precio</th>
                            <th class="border border-3">Importe</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (facturacion.facturaDetalle is not null)
                        {
                            @foreach (var item in facturacion.facturaDetalle)
                            {
                                <tr class="text-center">
                                    <td>@item.Concepto</td>
                                    <td>@item.Cantidad</td>
                                    <td>RD$ @item.Precio</td>
                                    <td>RD$ @item.Importe</td>
                                    <td class="hideWhenPrint">
                                        <button class="btn btn-danger mr-2" onclick="@(() => EliminarDetalle(item))">
                                            <i class="oi oi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                <hr>
            </div>

           <div class="custom-card-body">
                <div class="custom-row">
                    <div class="custom-col">
                        <div class="custom-form-group">
                            <div class="custom-input-group">
                                <div class="custom-input-group-prepend">
                                    <span class="custom-input-group-text">Total</span>
                                </div>
                                <input id="input-tamanio" type="number" class="custom-input" value="@facturacion.Total" readonly>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <br>
            <br>

            @*Botones*@
            <div class="card-footer hideWhenPrint">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo"><span
                            class="oi oi-file"></span>
                        Nuevo</button>
                    <button type="button" class="btn btn-outline-success" @onclick="Guardar"><span class="oi oi-document"></span>
                        Guardar</button>
                    <button type="button" disabled="@Condicion" class="btn btn-outline-danger" @onclick="Eliminar"><span
                            class="oi oi-delete"></span>
                        Eliminar</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code
{
    [Parameter]
    public int facturaId { get; set; }
    public Facturacion facturacion { get; set; } = new Facturacion();
    public List<Clientes> ClienteList = new List<Clientes>();
    public FacturacionDetalle detalle = new FacturacionDetalle();
    public bool Condicion { get; set; } = false;

    protected override void OnInitialized()
    {
        if (facturaId > 0)
        {
            this.facturacion.FacturaId = facturaId;
            this.Buscar();
        }
        ClienteList = ClienteBLL.GetList(p => true && p.Status == true);
    }

    public void Nuevo()
    {
        facturacion = new Facturacion();
        detalle.Cantidad = 0;
        detalle.Precio = 0;
        notify.ShowNotification("Nueva plantilla creada correctamente.", NotificationSeverity.Success);
        NavigationManager.NavigateTo($"/r_facturacion");
    }

    bool Validar()
    {
        bool validar = true;

        if (facturacion.facturaDetalle.Count < 1)
        {
            notify.ShowNotification("Debe agregar al menos un detalle", NotificationSeverity.Error);
            validar = false;
        }
        if(facturacion.ClienteId <= 0)
        {
            notify.ShowNotification("Debe seleccionar un cliente", NotificationSeverity.Error);
            validar = false;
        }

        return validar;
    }

    void Guardar()
    {

        if (!Validar()) { return; }

        if (FacturacionBLL.Guardar(facturacion))
        {
            notify.ShowNotification("Fue guardado correctamente.");
            //Generar factura en PDF
            jsRunTime.InvokeVoidAsync("Facturar");
            facturacion = new Facturacion();
        }
        else
        {
            notify.ShowNotification("No fue guardado, intentar nuevamente.", NotificationSeverity.Error);
        }
             
    }
    private void Buscar()
    {
        if (facturacion!.FacturaId > 0)
        {
            var encontrado = FacturacionBLL.Buscar(facturacion.FacturaId);
            
            if (encontrado != null)
            {
                notify.ShowNotification("Se ha encontrado con éxito", NotificationSeverity.Success);
                this.facturacion = encontrado;
            }
            else
            {
                notify.ShowNotification("El ID ingresado no ha sido encontrado.", NotificationSeverity.Error);
            }
        }
    }

    public void Eliminar()
    {
        if (FacturacionBLL.Eliminar(facturacion.FacturaId))
        {
            notify.ShowNotification("Se ha eliminado con éxito.", NotificationSeverity.Success);
            facturacion = new Facturacion();
        }
        else
        {
            notify.ShowNotification("No hay elementos para borrar.", NotificationSeverity.Warning);
            return;
        }
    }

    void AgregarDetalle()
    {
        if (detalle.Cantidad > 0 && detalle.Precio > 0)
        {
            detalle.Importe = detalle.Cantidad * detalle.Precio;
            this.facturacion.facturaDetalle.Add(this.detalle);
            this.detalle = new FacturacionDetalle();
            facturacion.Total = facturacion.facturaDetalle.Sum(p => p.Importe);
            if(Condicion == false && facturacion.FacturaId!=0){
                notify.ShowNotification("Se ha desactivado el boton eliminar, para poder eliminar la venta debe guardar los cambios", NotificationSeverity.Warning);
            }
            Condicion = true;
        }
        else
        {
            notify.ShowNotification("La cantidad y el precio deben ser mayor que 0.", NotificationSeverity.Warning);
        }
    }

    void EliminarDetalle(FacturacionDetalle detalleBorrado)
    {
        facturacion.Total -= detalleBorrado.Importe;
        facturacion.facturaDetalle.Remove(detalleBorrado);
        facturacion.Total = facturacion.facturaDetalle.Sum(p => p.Importe);
        if(Condicion == false && facturacion.FacturaId!=0){
            notify.ShowNotification("Se ha desactivado el boton eliminar, para poder eliminar la venta debe guardar los cambios", NotificationSeverity.Warning);
        }
        Condicion = true;
    }
}
