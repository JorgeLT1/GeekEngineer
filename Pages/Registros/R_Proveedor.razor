@page "/r_proveedor"
@page "/proveedor/{proveedorId:int}"
@inject ProveedorBLL ProveedorBLL
@inject NotificationService notify
@attribute [Authorize]

<EditForm Model="proveedor" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card col-lg-7 mx-auto">
        <div class="shadow">
            <div class="card-header">
                <h1 class="text-center"><strong>Registro de Proveedor</strong></h1>
            </div>
            <br>
            <br>
            <div class="card-body">
                <div class="row">
                    <div class="col-sm-2 col-md-4 mb-2 mx-auto">
                        <div class="group">
                            <InputNumber required="" @bind-Value="proveedor.ProveedorId" class="input" id="id" />
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label>No. ID</label>
                        </div>
                        <button type="button" class="btn" @onclick="Buscar" id="boton">
                            <span class="btn-text-one" style="color: white;" title='Buscar proveedor'>Buscar</span>
                        </button>
                    </div>
                    <div class="col-sm-2 col-md-4 mb-2 mx-auto"> </div>

                </div>
                <div class="row">
                    <div class="col-sm-2 col-md-4 mb-2 mx-auto">
                        <div class="group">
                            <InputDate required="" @bind-Value="proveedor.Fecha" class="input" id="fecha" />
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label>Fecha</label>
                            <ValidationMessage For="@(() => proveedor.Fecha)" />
                        </div>
                    </div>
                    <div class="col-sm-2 col-md-4 mb-2 mx-auto">
                        <div class="group">
                            <InputText required="" @bind-Value="proveedor.Nombre" class="input" />
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label>Nombre</label>
                            <ValidationMessage For="@(() => proveedor.Nombre)" />
                        </div>
                    </div>
                </div>
                <br>
                <br>
                <div class="row">
                    <div class="col-sm-2 col-md-4 mb-2 mx-auto">
                        <div class="group">
                            <InputText required="" @bind-Value="proveedor.RNC" class="input" />
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label>RNC</label>
                            <ValidationMessage For="@(() => proveedor.RNC)" />
                        </div>
                    </div>
                    <div class="col-sm-2 col-md-4 mb-2 mx-auto">
                        <div class="group">
                            <InputText required="" @bind-Value="proveedor.NCF" class="input" />
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label>NCF</label>
                            <ValidationMessage For="@(() => proveedor.NCF)" />
                        </div>
                    </div>
                </div>
                <br>
                <br>
                <div class="row">
                    <div class="col-sm-2 col-md-4 mb-2 mx-auto">
                        <div class="group">
                            <InputText required="" @bind-Value="proveedor.Direccion" class="input" />
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label>Dirección</label>
                            <ValidationMessage For="@(() => proveedor.Direccion)" />
                        </div>
                    </div>
                    <div class="col-sm-2 col-md-4 mb-2 mx-auto">
                        <div class="group">
                            <InputText required="" @bind-Value="proveedor.Telefono" class="input" />
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label>Teléfono</label>
                            <ValidationMessage For="@(() => proveedor.Telefono)" />
                        </div>
                    </div>
                    <div class="col-sm-2 col-md-4 mb-2 mx-auto">
                        <div class="group">
                            <InputText required="" @bind-Value="proveedor.Email" class="input" />
                            <span class="highlight"></span>
                            <span class="bar"></span>
                            <label>Email</label>
                            <ValidationMessage For="@(() => proveedor.Email)" />
                        </div>
                    </div>
                </div>

            </div>

            @*Botones*@
            <div class="card-footer">
                <div class="form-group text-center" display: inline-block>
                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo"><span
                            class="oi oi-file"></span>
                        Nuevo</button>
                    <button type="submit" class="btn btn-outline-success"><span class="oi oi-document"></span>
                        Guardar</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><span
                            class="oi oi-delete"></span>
                        Eliminar</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int ProveedorId { get; set; }
    public Proveedores proveedor { get; set; } = new Proveedores();
    

    protected override void OnInitialized()
    {
        if (ProveedorId > 0)
        {
            this.proveedor.ProveedorId = ProveedorId;
            this.Buscar();
        }
    }

    public void Nuevo()
    {
        proveedor = new Proveedores();
    }

    bool Validar()
    {
        bool validar = true;

        if (proveedor!.ProveedorId < 0)
        {
            notify.ShowNotification("El ID debe ser mayor que 0.", NotificationSeverity.Error);
            validar = false;
        }
        if(ProveedorId != proveedor.ProveedorId)
        {
            notify.ShowNotification("No se puede modificar el ID." , NotificationSeverity.Warning);
            validar = false;  
        }

        return validar;
    }


    void Guardar()
    {

        if (!Validar()) { return; }

        var proveedor2 = ProveedorBLL.ExisteNombreProveedor(proveedor.Nombre);

        if (proveedor2 == null) 
        {
            if (ProveedorBLL.Guardar(proveedor))
            {
                notify.ShowNotification("Fue guardado correctamente.");
                proveedor = new Proveedores();
            }
            else
                notify.ShowNotification("No fue guardado, intentar nuevamente.", NotificationSeverity.Error);
        }
        else 
        {
            if (proveedor2.Nombre.ToLower() == proveedor.Nombre.ToLower() && proveedor2.ProveedorId == proveedor.ProveedorId)
            {
                if (ProveedorBLL.Guardar(proveedor))
                {
                    notify.ShowNotification("Fue guardado correctamente.");
                    proveedor = new Proveedores();
                }
                else
                    notify.ShowNotification("No fue guardado, intentar nuevamente.", NotificationSeverity.Error);
            }
            else
            {
                notify.ShowNotification("Ya está registrado.", NotificationSeverity.Warning);
            }
        }
    }

    private void Buscar()
    {
        if (proveedor!.ProveedorId > 0)
        {
            var encontrado = ProveedorBLL.Buscar(proveedor.ProveedorId);
            if (encontrado != null)
            {
                notify.ShowNotification("Se ha encontrado con éxito", NotificationSeverity.Info);
                this.proveedor = encontrado;
            }
            else
            {
                notify.ShowNotification("El ID ingresado no ha sido encontrado", NotificationSeverity.Error);
            }
        }
    }

    public void Eliminar()
    {
        if (ProveedorBLL.Eliminar(proveedor.ProveedorId))
        {
            notify.ShowNotification("Se ha eliminado con éxito", NotificationSeverity.Info);
            Nuevo();
        }
        else
        {
            notify.ShowNotification("No hay elementos para borrar", NotificationSeverity.Warning);
            return;
        }
    }
}